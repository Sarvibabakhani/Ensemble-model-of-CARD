# -*- coding: utf-8 -*-
"""DenseNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1godqVV3cyiS004gbEYhmbLyMXb2JDwwc
"""

import tensorflow as tf
from tensorflow.keras.layers import Input, Conv2D, BatchNormalization, Dense
from tensorflow.keras.layers import AvgPool2D, GlobalAveragePooling2D, MaxPool2D
from tensorflow.keras.models import Model
from tensorflow.keras.layers import ReLU, concatenate
import tensorflow.keras.backend as K


def conv(x, filters, kernel=1, strides=1):
    x = BatchNormalization()(x)
    x = ReLU()(x)
    x = Conv2D(filters, kernel, strides=strides,padding = 'same')(x)
    return x

def dense_block(x, repetition, filters):
  for _ in range(repetition):
    y = conv(x, 4*filters)
    y = conv(y, filters, 3)
    x = concatenate([y,x])
  return x

def transition_layer(x):
  x = conv(x, K.int_shape(x)[-1] //2 )
  x = AvgPool2D(2, strides = 2, padding = 'same')(x)
  return x

# Creating Densenet121
def densenet(input_shape, n_classes, filters = 32):
  input = Input (input_shape)
  x = conv(input, 64, 7, 2)
  x = MaxPool2D(3, strides = 2, padding = 'same')(x)
  for repetition in [6,12,24,16]:
    d = dense_block(x, repetition, filters)
    x = transition_layer(d)
  x = GlobalAveragePooling2D()(d)
  output = Dense(n_classes, activation = 'softmax')(x)
  model = Model(input, output)
  return model

