# -*- coding: utf-8 -*-
"""DataLoader.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A4BwoxDPyUZAPrnostXcD-GWs_HeDo6i
"""



import pandas as pd
import numpy as np
import os
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator

def convert_to_one_hot(Y, C):
    Y = np.eye(C, dtype ="int")[Y].T
    return Y



def data_func(batch_size , path_metadata ,path_pneumonia ,directory_dataset, image_size ):
  
  seed=95
  test_size=0.2

  #auggumentation parameter
  rescale=1/255
  samplewise_center=True 
  samplewise_std_normalization=True
  rotation_range=25 
  width_shift_range=0.25 
  height_shift_range=0.25 
  zoom_range=0.2 
  horizontal_flip=True 
  brightness_range=[0.8,1.2]


  validation_split=0.2 #split train and validation
  
  dataframe = pd.read_csv(path_metadata)

#---------------------------------------------------cleaning data------------------------------------------
  #The third class in datafram was wrong, so we romove it and replace by true one from original data

  dataframe_clean = dataframe.loc[dataframe["class"] != 2].reset_index(drop="True") #remove wrong data

  dir_list = os.listdir(path_pneumonia) #list original directory of the third class
  dataframe_pneumonia = pd.DataFrame(dir_list,columns =['directory'])#make a dataframe from the directories

  dataframe_pneumonia['directory'] = 'pneumonia/'+ dataframe_pneumonia['directory'].astype(str)  
  dataframe_pneumonia['class'] =2 #add the class label to dataframe

  df_final = pd.concat([dataframe_clean,dataframe_pneumonia]).reset_index(drop="True") #concatenate two datafram
  df_final['class']= df_final['class'].values.astype('str')

#-------------------------------------------------------------------------------------------------------------------

  df_shuffle = df_final.sample(frac=1, random_state=1).reset_index(drop="True") #shuffle data

  train, test = train_test_split(df_shuffle, test_size=test_size, random_state=42) #split to train and test

  train = train.reset_index(drop="True")
  test = test.reset_index(drop="True")

  demo = test.iloc[0:50, ] #take 50 samples from test for demo

#--------------------------------------------# AUGGUMENTATION and LOAD DATA -------------------------------------------
  image_generator_train = ImageDataGenerator(
        rescale = rescale,
        samplewise_center = samplewise_center,
        samplewise_std_normalization = samplewise_std_normalization,
        rotation_range = rotation_range, 
        width_shift_range = width_shift_range, 
        height_shift_range = height_shift_range, 
        zoom_range = zoom_range, 
        horizontal_flip = horizontal_flip, 
        brightness_range = brightness_range,
        validation_split = validation_split)

  image_generator_validation = ImageDataGenerator(
          rescale = rescale,
          samplewise_center = samplewise_center,
          samplewise_std_normalization = samplewise_std_normalization,
          validation_split = validation_split)

  image_generator_test = ImageDataGenerator(
          rescale = rescale,
          samplewise_center = samplewise_center,
          samplewise_std_normalization = samplewise_std_normalization)
    
  image_generator_demo = ImageDataGenerator(
          rescale = rescale,
          samplewise_center = samplewise_center,
          samplewise_std_normalization = samplewise_std_normalization)

  train_dataset = image_generator_train.flow_from_dataframe(
      train,
      directory = directory_dataset,
      x_col='directory',
      y_col='class',
      target_size = image_size,
      class_mode='categorical',
      batch_size=batch_size,
      shuffle=False,
      seed=seed,
      subset='training')

  validation_dataset = image_generator_validation.flow_from_dataframe(
      train,
      directory = directory_dataset,
      x_col='directory',
      y_col='class',
      target_size=image_size,
      class_mode='categorical',
      batch_size=batch_size,
      shuffle=False,
      seed=seed,
      subset='validation')
  
  test_dataset = image_generator_test.flow_from_dataframe(
    test,
    directory= directory_dataset,
    x_col='directory',
    y_col='class',
    target_size = image_size,
    class_mode='categorical',
    batch_size=1,
    shuffle=False,
    seed=seed)


  demo_dataset = image_generator_demo.flow_from_dataframe(
    demo,
    directory= directory_dataset,
    x_col='directory',
    y_col='class',
    target_size = image_size,
    class_mode='categorical',
    batch_size=1,
    shuffle=False,
    seed=seed)  
    
    
  train_steps = train_dataset.n//train_dataset.batch_size
  validation_steps = validation_dataset.n//validation_dataset.batch_size
    
  test_steps = test_dataset.n//test_dataset.batch_size

  y_true = test['class'].values.astype('int')
  y_true_oh = convert_to_one_hot(y_true,3).T
    
    
  demo_true = demo['class'].values.astype('int')
  demo_true_oh = convert_to_one_hot(demo_true,3).T

  return(train_dataset,validation_dataset ,test_dataset,y_true,y_true_oh,train_steps,    validation_steps,test_steps,demo_dataset,demo_true,demo_true_oh)

